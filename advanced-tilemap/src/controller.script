-----------------------------------------
-- Utility script.
-- Camera rotating controller.
-- Touch handler.
-----------------------------------------

local rendercam = require 'rendercam.rendercam'

go.property("cam", msg.url("cam"))
go.property("click_url", msg.url(""))
go.property("invert", true)

local touch = hash("touch")

local camlimits = {
	ey = {min = -120, max = 120},
	ex = {min = -20, max = 20},
	ez = {min = -20, max = 20},
}

local function clamp(x, min, max)
	return x < min and min or (x > max and max or x)
  end

function init(self)
	msg.post(".", "acquire_input_focus")
	self.touch_down = false
	self.touch_action = 0
	self.touch_action_bias = 10
end

function final(self)
	msg.post(".", "release_input_focus")
end



local function released(self)
	local angle = go.get(self.cam, "euler")
	go.animate(self.cam, "euler.y", go.PLAYBACK_ONCE_FORWARD, clamp(angle.y, camlimits.ey.min, camlimits.ey.max), go.EASING_OUTBACK, .5)
	go.animate(self.cam, "euler.x", go.PLAYBACK_ONCE_FORWARD, clamp(angle.x, camlimits.ex.min, camlimits.ex.max), go.EASING_OUTBACK, .2)
	go.animate(self.cam, "euler.z", go.PLAYBACK_ONCE_FORWARD, clamp(angle.z, camlimits.ez.min, camlimits.ez.max), go.EASING_OUTBACK, .2)
end

local function move(self, action)
	local angle = go.get(self.cam, "euler")
		go.cancel_animations(self.cam, "euler")

		local dx = self.invert and -action.dx or action.dx
		local dy = self.invert and -action.dy or action.dy

		-- Z-axis
		if (angle.z > camlimits.ez.min and action.dx > 0) or (angle.z < camlimits.ez.max and action.dx < 0) then 
			go.set(self.cam, "euler.z", angle.z - action.dx * 0.15)
		else
			go.set(self.cam, "euler.z", angle.z - action.dx * 0.01) 
		end

		-- X-axis
		if (angle.x > camlimits.ex.min and dy < 0) or (angle.x < camlimits.ex.max and dy > 0) then 
			go.set(self.cam, "euler.x", angle.x + dy * 0.15)
		else
			go.set(self.cam, "euler.x", angle.x + dy * 0.01) 
		end

end

local function zoom(self, action_id, action)
	
	if action_id == hash("wup") then
		rendercam.zoom(10)
	elseif action_id == hash("wdown") then
		rendercam.zoom(-10)
	end
end

function on_input(self, action_id, action)

	zoom(self, action_id, action)

	if action_id == touch then
		self.touch_down = true
		if action.pressed then
		end
		
		if action.released then
			if self.touch_action < self.touch_action_bias then
				msg.post(self.click_url, "click", action)
			end

			self.touch_down = false
			self.touch_action = 0

			released(self)
		end
	end
	
	if self.touch_down and action_id == nil then
		self.touch_action = self.touch_action + 1
		move(self, action)
	end
	
end

